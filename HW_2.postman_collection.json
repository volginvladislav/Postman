{
	"info": {
		"_postman_id": "0b0909e2-80bb-4df8-aa8d-f83e13a77fd1",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "N_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"2_Status code = 200\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"pm.test(\"3_Status code = 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.below(201).and.to.be.above(199);\r",
							"});\r",
							"\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							"console.log(pm.response.text());\r",
							"pm.test(\"2_Body is correct\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							"pm.test(\"3_Body is correct\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							"pm.test(\"4_Body is correct\", function () {\r",
							"    pm.expect(pm.response.text() === \"This is the first responce from server!\").to.be.true;\r",
							"});\r",
							"pm.test(\"5_Body is correct\", function () {\r",
							"    pm.expect(pm.response.text()).to.have.string(\"This is the first responce from server!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "N_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"//let jsonData = JSON.parse(responceBody);\r",
							"\r",
							"//3. 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"name = Vlad\", function () {\r",
							"    pm.expect(jsonData.name).to.eql('Vlad');\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"age = 25\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"25\");\r",
							"});\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"salary = 2000\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(2000);\r",
							"});\r",
							"\r",
							"//7. Спарсить request\r",
							"let requestData = request.data;\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"nameResp = nameReq\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(requestData.name);\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"ageResp = ageReq\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(requestData.age);\r",
							"});\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"console.log(\"requestData.salary =\",requestData.salary);\r",
							"pm.test(\"salaryResp = salaryReq\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(parseInt(requestData.salary));\r",
							"});\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(\"family =\", jsonData.family);\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year_Resp = salaryReq * 4\" , function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(requestData.salary * 4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vlad",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "N_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2.Статус код 200\r",
							"pm.test(\"Status code = 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json\r",
							"let jsonResp = pm.response.json();\r",
							"\r",
							"//4. Спарсить request\r",
							"let jsonReq = pm.request.url.query.toObject();\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"console.log(\"jsonReq =\", jsonReq);\r",
							"console.log(\"jsonResp =\", jsonResp);\r",
							"pm.test(\"nameResp = namereq\", function () {\r",
							"    pm.expect(jsonResp.name).to.eql(jsonReq.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"ageResp = ageReq\", function () {\r",
							"    pm.expect(jsonResp.age).to.eql(jsonReq.age);\r",
							"});\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salaryResp = salaryReq\", function () {\r",
							"    pm.expect(jsonResp.salary).to.eql(+jsonReq.salary);\r",
							"});\r",
							"\r",
							"//8. Вывести в консоль параметр family из response\r",
							"console.log(\"familyResp =\", jsonResp.family);\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name\r",
							"pm.test(\"dog has parameter name\", function () {\r",
							"    pm.expect(jsonResp.family.pets.dog).to.include.keys(\"name\");\r",
							"});\r",
							"pm.test(\"dog has parameter name_var2\", function () {\r",
							"    pm.expect(jsonResp.family.pets.dog).to.haveOwnProperty(\"name\");\r",
							"});\r",
							"pm.test(\"dog has parameter name_var3\", function () {\r",
							"    pm.expect(jsonResp.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"pm.test(\"dog has parameter name_var4\", function () {\r",
							"    pm.expect(jsonResp.family.pets.dog).to.have.any.keys(\"name\");\r",
							"});\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"dog has parameter age\", function () {\r",
							"    pm.expect(jsonResp.family.pets.dog).to.have.any.keys(\"age\");\r",
							"});\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"dogs name is Luky\", function () {\r",
							"    pm.expect(jsonResp.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"pm.test(\"dogs name is Luky var_2\", function () {\r",
							"    pm.expect(jsonResp.family.pets.dog).to.have.property(\"name\",\"Luky\");\r",
							"});\r",
							"//12. Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"dogs age is 4\", function () {\r",
							"    pm.expect(jsonResp.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Vlad&age=26&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Vlad"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "N_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"let jsonResp = JSON.parse(responseBody);\r",
							"\r",
							"//4. Спарсить request.\r",
							"let jsonReq = pm.request.url.query.toObject();\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"nameResp = nameReq\", function () {\r",
							"    pm.expect(jsonResp.name).to.eql(jsonReq.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"console.log(\"jsonReq.age =\", jsonReq.age);\r",
							"console.log(\"jsonResp.age =\", jsonResp.age);\r",
							"pm.test(\"ageResp = age Req\", function () {\r",
							"    pm.expect(jsonResp.age).to.eql(+jsonReq.age);\r",
							"});\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"salaryReq =\", jsonReq.salary);\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"salaryResp =\", jsonResp.salary);\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"element 0 from resp =\", jsonResp.salary[0]);\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"element 1 from resp =\", jsonResp.salary[1]);\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"element 2 from resp =\", jsonResp.salary[2]);\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"element 0 from salaryResp = salaryReq\", function () {\r",
							"    pm.expect(jsonResp.salary[0]).to.eql(+jsonReq.salary);\r",
							"});\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"elemen 1 from salaryResp = salaryReq*2\", function () {\r",
							"    pm.expect(+jsonResp.salary[1]).to.eql(jsonReq.salary*2);\r",
							"});\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"elemen 2 from salaryResp = salaryReq*3\", function () {\r",
							"    pm.expect(+jsonResp.salary[2]).to.eql(jsonReq.salary*3);\r",
							"    console.log(\"salaryResp[2] =\", +jsonResp.salary[2])\r",
							"    console.log(\"salaryReq*3 =\", jsonReq.salary*3)\r",
							"});\r",
							"\r",
							"//15. Создать в окружении переменную name\r",
							"//16. Создать в окружении переменную age\r",
							"//17. Создать в окружении переменную salary\r",
							"//18. Передать в окружение переменную name\r",
							"let name = jsonReq.name;\r",
							"let age = jsonReq.age;\r",
							"let salary = jsonReq.salary;\r",
							"pm.environment.set(\"name\", name);\r",
							"\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", age);\r",
							"\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", salary)\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"let count = 0;\r",
							"for (let i = 0; i < jsonResp.salary.length; i ++ ) {\r",
							"    console.log(\"элемент \", count, \"salary =\", jsonResp.salary[i]);\r",
							"    count ++\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Vlad&age=26&salary=2500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Vlad"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "2500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "N_5_new",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"code has status 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonResp = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let jsonReq = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"jsonResp has start_qa_salary\", function() {\r",
							"    pm.expect(jsonResp).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"jsonResp has qa_salary_after_6_month\", function () {\r",
							"    pm.expect(jsonResp).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"jsonResp has qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonResp).to.include.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"jsonResp has qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonResp).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"jsonResp has qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonResp).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"jsonResp has qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonResp).to.include.keys(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"//Проверка пунктов 8 - 12 (have - если знаем, что это все ключи. include - если просто проверяем сразу несколько ключей)\r",
							"pm.test(\"check all keys_1\", function () {\r",
							"    pm.expect(jsonResp).to.have.keys(\"qa_salary_after_6_months\",\"person\",\"qa_salary_after_1.5_year\",\"qa_salary_after_12_months\",\"qa_salary_after_3.5_years\",\"start_qa_salary\");\r",
							"});\r",
							"pm.test(\"check all keys_2\", function () {\r",
							"    pm.expect(jsonResp).to.include.keys(\"qa_salary_after_6_months\",\"person\",\"qa_salary_after_1.5_year\",\"qa_salary_after_12_months\",\"qa_salary_after_3.5_years\",\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"console.log(\"jsonResp.start_qa_salary =\",jsonResp.start_qa_salary);\r",
							"console.log(\"jsonReq.salary =\",jsonReq.salary);\r",
							"pm.test(\"jsonResp.start_qa_salary = jsonReq.salary\", function() {\r",
							"    pm.expect(jsonResp.start_qa_salary == jsonReq.salary).to.be.true;\r",
							"});\r",
							"\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months = jsonReq.salary*2\", function() {\r",
							"    pm.expect(jsonResp.qa_salary_after_6_months).to.eql(jsonReq.salary * 2);\r",
							"});\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months = jsonReq.salary*2.7\", function() {\r",
							"    pm.expect(jsonResp.qa_salary_after_12_months).to.eql(jsonReq.salary * 2.7);\r",
							"});\r",
							"\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_months = jsonReq.salary*3.3\", function() {\r",
							"    pm.expect(jsonResp[\"qa_salary_after_1.5_year\"]).to.eql(jsonReq.salary * 3.3);\r",
							"});\r",
							"\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years = jsonReq.salary*2.7\", function() {\r",
							"    pm.expect(jsonResp[\"qa_salary_after_3.5_years\"]).to.eql(jsonReq.salary * 3.8);\r",
							"});\r",
							"\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"person.u_name[1] = jsonReq.salary\", function () {\r",
							"    pm.expect(jsonResp.person.u_name[1]).to.eql(+jsonReq.salary);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"person.u_age = jsonReq.age\", function () {\r",
							"    pm.expect(jsonResp.person.u_age).to.eql(+jsonReq.age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"u_salary_5_years = jsonReq.salary*4.2\", function () {\r",
							"    pm.expect(jsonResp.person.u_salary_5_years).to.eql(jsonReq.salary * 4.2);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"let pers = jsonResp.person;\r",
							"    for (let i in pers) {\r",
							"        if (typeof (pers[i]) === \"object\") {\r",
							"             let arr_pers = pers[i];\r",
							"             console.log(\"key:\", i, \"type \", typeof pers[i]);\r",
							"             for (let j = 0; j < arr_pers.length; j++) {\r",
							"                console.log(\"Элемент -\", String(j),arr_pers[j]);\r",
							"             }\r",
							"        }\r",
							"        else {\r",
							"            console.log(\"key:\", i, \"value\", pers[i])\r",
							"        }\r",
							"    }\r",
							"        "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}